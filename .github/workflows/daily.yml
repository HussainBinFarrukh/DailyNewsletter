name: Daily Newsletter
on:
  schedule:
    - cron: "15 11 * * *"   # 07:15 America/New_York (11:15 UTC)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Show repo tree (debug)
        run: |
          echo "Repo root:"
          ls -la
          echo ""
          echo ".github/workflows:"
          ls -la .github/workflows || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip --version
          python -c "import sys; print('Python:', sys.version)"
          python -c "import feedparser, yaml, jinja2, requests; print('Imports OK')"

      - name: Check required env (no secrets printed)
        run: |
          test -n "${BREVO_API_KEY}" && echo "BREVO_API_KEY: set" || echo "::warning ::BREVO_API_KEY is MISSING"
          test -n "${SENDER_EMAIL}" && echo "SENDER_EMAIL: set" || echo "::warning ::SENDER_EMAIL is MISSING"
          test -n "${RECIPIENTS}" && echo "RECIPIENTS: set" || echo "::warning ::RECIPIENTS is MISSING"
          test -n "${OPENAI_API_KEY}" && echo "OPENAI_API_KEY: set" || echo "OPENAI_API_KEY: (optional) not set"
        env:
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          RECIPIENTS: ${{ secrets.RECIPIENTS }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run pipeline (capture logs, do not fail job)
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: gpt-4o-mini
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
          SENDER_NAME: "Daily ERP Brief"
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          RECIPIENTS: ${{ secrets.RECIPIENTS }}
          TIMEZONE: America/New_York
          SEND_MODE: transactional
          MIN_ITEMS_TO_SEND: 1
        run: |
          set -o pipefail
          mkdir -p logs
          echo "Starting pipeline..."
          python -u pipeline.py 2>&1 | tee logs/pipeline.log
          EXIT=$?
          echo "pipeline.py exit code: $EXIT" | tee -a logs/pipeline.log
          if [ $EXIT -ne 0 ]; then
            echo "::error ::pipeline.py exited with code $EXIT (see artifact logs/pipeline.log)"
          fi
          # Do not fail the job; continue so we can commit artifacts and /out
          echo $EXIT > logs/exit_code.txt
          exit 0

      - name: Upload logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs
          path: logs/

      - name: Commit & publish archive (if generated)
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          mkdir -p out
          TODAY=$(date -u +"%Y-%m-%d")
          if [ -f "out/${TODAY}.html" ]; then
            cp "out/${TODAY}.html" "out/index.html" || true
          fi
          if git status --porcelain | grep -q " out/"; then
            git add out/*.html || true
            git commit -m "Auto: publish daily issue"
            git push
          else
            echo "No changes to publish."
          fi

      - name: Upload out/ artifact (for preview)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-out
          path: out/
          if-no-files-found: warn
